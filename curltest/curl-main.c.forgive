#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <curl.h>

struct MemoryStruct {
  char *memory;
  size_t size;
};
 
static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp)
{
  size_t realsize = size * nmemb;
  struct MemoryStruct *mem = (struct MemoryStruct *)userp;
  mem->memory = realloc(mem->memory, mem->size + realsize + 1);
  if(mem->memory == NULL) {
    /* out of memory! */ 
    printf("not enough memory (realloc returned NULL)\n");
    return 0;
  }


  memcpy(&(mem->memory[mem->size]), contents, realsize);
  mem->size += realsize;
  mem->memory[mem->size] = 0;
  return realsize;

}


int main(void)
{
CURL *curl = NULL;
CURLcode res;
struct MemoryStruct chunk;

chunk.memory = malloc(1);  /* will be grown as needed by the realloc above */ 
chunk.size = 0;    /* no data at this point */ 
curl_global_init(CURL_GLOBAL_ALL);
/* get a curl handle */
curl = curl_easy_init();
if (!curl) {
return -1;
}

/*设置easy handle属性*/
/* specify URL */
//char[] url = "https://www.baidu.com";

curl_easy_setopt (curl,CURLOPT_URL, "https://www.baidu.com");
/* Define our callback to get called when there's data to be written */
curl_easy_setopt (curl,CURLOPT_WRITEFUNCTION, WriteMemoryCallback);
/* Set a pointer to our struct to pass to the callback */
curl_easy_setopt(curl,CURLOPT_WRITEDATA, (void *)&chunk);
/* set commom option */

curl_easy_setopt (curl,CURLOPT_SSL_VERIFYPEER, 0L);
curl_easy_setopt (curl,CURLOPT_SSL_VERIFYHOST, 0L);
curl_easy_setopt (curl,CURLOPT_SSLCERT,"client.crt");

curl_easy_setopt (curl, CURLOPT_SSLCERTTYPE, "PEM");
curl_easy_setopt (curl, CURLOPT_SSLKEY,"client.key");
curl_easy_setopt (curl, CURLOPT_SSLKEYTYPE,"PEM");
curl_easy_setopt (curl,CURLOPT_TIMEOUT, 60L);
curl_easy_setopt (curl,CURLOPT_CONNECTTIMEOUT, 10L);
/* get verbose debug output please */


/*执行数据请求*/
res = curl_easy_perform(curl);
if (res !=CURLE_OK) {
fprintf(stderr, "curl_easy_perform() failed: %s\n",
curl_easy_strerror(res));
}   
// 释放资源
free(chunk.memory);
curl_easy_cleanup(curl);
curl_global_cleanup();
return 0;
}
